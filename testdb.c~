#include <stdio.h>
#include <stdlib.h>
#include <openssl/evp.h>
 
#define LEN 5

int main()
{
   FILE *fp;
   unsigned char[50] storeduser, storedpwd;
   unsigned char[50] username,password;
   unsigned char[100] sendcred;
   

  EVP_MD_CTX *mdctx;
 const EVP_MD *md;
 char storedig[100];
 char * storeptr;
 unsigned char md_value[EVP_MAX_MD_SIZE];
 int md_len, i;

   if( (fp=fopen("userdb.txt","w")) == NULL )
     puts("File can not open !\n"), exit(1);
   
   for (i=0;i<5;i++){
	printf("type username :"); scanf("%s",username); printf("\n");
   	printf("type password :"); scanf("%s",password); printf("\n");
	 
	//generate random salt
	unsigned char * salt = (unsigned char *) malloc (sizeof(unsigned char)*LEN);
	FILE* random = fopen("/dev/urandom","r");
	fread(salt,sizeof(unsigned char)*LEN,1,random);
	fclose(random);

	//compose the combined password
	for(i=0;i<5;i++){
		sendcred[i]=salt[i];
	}
	for(i=0;i<strlen(password);i++){
		sendcred[i+5]=password[i];
	}

	//set value of message digest used
	 md = EVP_sha256();
	 if(!md) {
		printf("Unknown message digest %s\n", "md5");
		exit(1);
	 }

	//Hash the initial message to use the hash for further calculations
	 mdctx = EVP_MD_CTX_create();
	 EVP_DigestInit_ex(mdctx, md, NULL);
	 EVP_DigestUpdate(mdctx, sendcred, strlen(sendcred));
	 EVP_DigestFinal_ex(mdctx, md_value, &md_len);
	 EVP_MD_CTX_destroy(mdctx);

	//Printing the calculated hash.
	storeptr=storedig;
	printf("Message Digest for Input string  is:\nMD5: ");
	 
	for(i = 0; i < md_len; i++){
		storeptr+=sprintf(storeptr,"%02x", md_value[i]);
	}
	printf("%s\n",storedig);

	fprintf(fp,"%s\t%s\t%s\n",username,salt,storedig);
    }
   
   /*
    while( !feof(fp) )                 
   {
      fscanf(fp,"%s %s",storeduser,storedpwd);
 
      if((No1==username) && (No2==password))
      {
         printf("Correct Numbers");
      }
      else
      {
         printf("Wrong Numbers");
      }
   }
 */
   fclose(dg);                         
 
 return 0;
}
